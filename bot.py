import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ==== –õ–û–ì–ò ====
logging.basicConfig(level=logging.INFO)

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
API_TOKEN = "8091593417:AAEKe5qIJLiLslk05Ssjk5tfUD-aCiDYKRE"
if not API_TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

print("TOKEN:", API_TOKEN)
if not API_TOKEN:
    raise ValueError("‚ùå API_TOKEN is not set!")

print("TOKEN IS:", API_TOKEN)


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# ==== –ù–ê–°–¢–†–û–ô–ö–ò GOOGLE SHEETS ====
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_path = "/etc/secrets/credentials.json"  # –ø—É—Ç—å –¥–ª—è Render Secret File

if not os.path.exists(creds_path):
    raise FileNotFoundError(f"‚ùå –§–∞–π–ª {creds_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Secret Files!")

creds = ServiceAccountCredentials.from_json_keyfile_name(creds_path, scope)
client = gspread.authorize(creds)
sheet = client.open("–ê–Ω–∫–µ—Ç–∞").sheet1

# ==== –°–û–°–¢–û–Ø–ù–ò–Ø ====
class Form(StatesGroup):
    name = State()
    phone = State()
    birthdate = State()
    city = State()

# ==== –°–¢–ê–†–¢ ====
@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await Form.name.set()
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º. –í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û:")

# ==== –û–ë–†–ê–ë–û–¢–ö–ê –§–ò–û ====
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await Form.phone.set()
    await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# ==== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–õ–ï–§–û–ù–ê ====
@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await Form.birthdate.set()
    await message.reply("–£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.1990):")

# ==== –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–¢–´ ====
@dp.message_handler(state=Form.birthdate)
async def process_birthdate(message: types.Message, state: FSMContext):
    await state.update_data(birthdate=message.text)
    await Form.city.set()
    await message.reply("–ò, –Ω–∞–∫–æ–Ω–µ—Ü, –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")

# ==== –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–†–û–î–ê –ò –ó–ê–ü–ò–°–¨ ====
@dp.message_handler(state=Form.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É
    try:
        sheet.append_row([data['name'], data['phone'], data['birthdate'], data['city']])
        await message.reply("üéâ –°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets.")
    except Exception as e:
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

    await state.finish()

# ==== –ó–ê–ü–£–°–ö ====
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
