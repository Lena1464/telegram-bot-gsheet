import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ==== –õ–û–ì–ò ====
logging.basicConfig(level=logging.INFO)

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# ==== GOOGLE SHEETS ====
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_path = "/etc/secrets/credentials.json"

if not os.path.exists(creds_path):
    raise FileNotFoundError(f"‚ùå –§–∞–π–ª {creds_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Secret Files!")

creds = ServiceAccountCredentials.from_json_keyfile_name(creds_path, scope)
client = gspread.authorize(creds)
sheet = client.open("–ê–Ω–∫–µ—Ç–∞").sheet1  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã!

# ==== –°–û–°–¢–û–Ø–ù–ò–Ø ====
class Form(StatesGroup):
    name = State()
    birthdate = State()
    phone = State()

# ==== –°–¢–ê–†–¢ ====
@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await Form.name.set()
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–µ—Ç–∏ –æ–ø—Ç–∏–∫ –•–ê–ú–ï–õ–ï–û–ù –∏ –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –±–æ–Ω—É—Å–Ω–æ–π –∫–∞—Ä—Ç—ã.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

# ==== –§–ò–û ====
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await Form.birthdate.set()
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.1990):")

# ==== –î–ê–¢–ê –†–û–ñ–î–ï–ù–ò–Ø ====
@dp.message_handler(state=Form.birthdate)
async def process_birthdate(message: types.Message, state: FSMContext):
    await state.update_data(birthdate=message.text)
    await Form.phone.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# ==== –¢–ï–õ–ï–§–û–ù + –ó–ê–ü–ò–°–¨ ====
@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()

    try:
        sheet.append_row([data['name'], data['phone'], data['birthdate']])
        await message.reply(
            "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n\n –í–∞—à–∞ –±–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\nüìû –ü—Ä–æ—Å—Ç–æ –Ω–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª—é–±–æ–º —Å–∞–ª–æ–Ω–µ –•–ê–ú–ï–õ–ï–û–ù."
        )
    except Exception as e:
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

    await state.finish()

# ==== –ó–ê–ü–£–°–ö ====
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
